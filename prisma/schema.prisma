// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

// generator nestgraphql {
//   provider = "node node_modules/prisma-nestjs-graphql"
//   // for yarn monorepos
//   // provider = "prisma-nestjs-graphql"
//   output   = "../src/@generated"
// }

enum Role {
  ADMIN
  STUDENT
  TEACHER
  DIRECTOR
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  lastname  String
  password  String
  role      Role
  nickname  String
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt
  Grade     Grade     @relation(fields: [gradeId], references: [id])
  gradeId   Int
  School    School    @relation(fields: [schoolId], references: [id])
  schoolId  Int
  Score     Score[]
  Doc       Doc[]
}

enum Privacity {
  PUBLIC
  PRIVATE
}

enum DocTypes {
  EVALUATION
  NOTES
  EXERCISES
}

model Doc {
  id         Int       @id @default(autoincrement())
  externalId String       @unique
  privacity  Privacity
  title      String
  type       DocTypes
  content    String
  Score      Score[]
  Subject    Subject   @relation(fields: [subjectId], references: [id])
  subjectId  Int
  Topic      Topic     @relation(fields: [topicId], references: [id])
  topicId    Int
  Subtopic   Subtopic? @relation(fields: [subtopicId], references: [id])
  subtopicId Int?
  Author     User      @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime? @default(now())
  updateAt   DateTime? @updatedAt
}

model Score {
  id           Int       @id @default(autoincrement())
  score        Int
  userId       Int
  alternatives String
  User         User      @relation(fields: [userId], references: [id])
  docId        Int
  document     Doc       @relation(fields: [docId], references: [id])
  createdAt    DateTime? @default(now())
  updateAt     DateTime? @updatedAt
}

model Grade {
  id        Int               @id @default(autoincrement())
  grade     String            @unique
  Users     User[]
  Schools   GradesOnSchools[]
  createdAt DateTime?         @default(now())
  updateAt  DateTime?         @updatedAt
}

model Subject {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  color     String
  Topics    Topic[]
  Subtopic  Subtopic[]
  Docs      Doc[]
  createdAt DateTime?  @default(now())
  updateAt  DateTime?  @updatedAt
}

model Topic {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  Subject   Subject?   @relation(fields: [subjectId], references: [id])
  subjectId Int?
  Docs      Doc[]
  Subtopics Subtopic[]
  createdAt DateTime?  @default(now())
  updateAt  DateTime?  @updatedAt
}

model Subtopic {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt
  Subject   Subject?  @relation(fields: [subjectId], references: [id])
  subjectId Int?
  Topic     Topic     @relation(fields: [topicId], references: [id])
  Docs      Doc[]
  topicId   Int
}

model School {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  Users     User[]
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt
}

model GradesOnSchools {
  Grade     Grade     @relation(fields: [gradeId], references: [id])
  gradeId   Int
  schoolId  Int
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt

  @@id([gradeId, schoolId])
}
