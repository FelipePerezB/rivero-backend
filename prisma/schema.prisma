// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// generator nestgraphql {
//   provider = "node node_modules/prisma-nestjs-graphql"
//   // for yarn monorepos
//   // provider = "prisma-nestjs-graphql"
//   output   = "../src/@generated"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  lastname  String
  stars     Int
  password  String
  role      String
  nickname  String
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt
  grade     Grade     @relation(fields: [gradeId], references: [id])
  gradeId   Int
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  Int
  Score     Score[]
  Doc       Doc[]
}

model Doc {
  id        Int            @id @default(autoincrement())
  title     String
  type      String
  content   Json
  topicId   Int
  topic     Topic          @relation(fields: [topicId], references: [id])
  grades    GradesOnDocs[]
  userId    Int
  author    User           @relation(fields: [userId], references: [id])
  Score     Score[]
  createdAt DateTime?      @default(now())
  updateAt  DateTime?      @updatedAt
}

model Score {
  id           Int       @id @default(autoincrement())
  score        Int
  userId       Int
  alternatives String
  user         User      @relation(fields: [userId], references: [id])
  docId        Int
  document     Doc       @relation(fields: [docId], references: [id])
  createdAt    DateTime? @default(now())
  updateAt     DateTime? @updatedAt
}

model Grade {
  id        Int               @id @default(autoincrement())
  grade     String            @unique
  createdAt DateTime?         @default(now())
  updateAt  DateTime?         @updatedAt
  users     User[]
  docs      GradesOnDocs[]
  schools   GradesOnSchools[]
}

model Subject {
  id        Int                 @id @default(autoincrement())
  name      String              @unique
  color     String
  schools   SubjectsOnSchools[]
  topics    Topic[]
  createdAt DateTime?           @default(now())
  updateAt  DateTime?           @updatedAt
}

model Topic {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt
  subject   Subject?  @relation(fields: [subjectId], references: [id])
  subjectId Int?
  Doc       Doc[]
}

model School {
  id        Int                 @id @default(autoincrement())
  name      String              @unique
  users     User[]
  createdAt DateTime?           @default(now())
  updateAt  DateTime?           @updatedAt
  subjects  SubjectsOnSchools[]
  grades    GradesOnSchools[]
}

model GradesOnSchools {
  Grade     Grade     @relation(fields: [gradeId], references: [id])
  gradeId   Int
  School    School    @relation(fields: [schoolId], references: [id])
  schoolId  Int
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt

  @@id([gradeId, schoolId])
}

model SubjectsOnSchools {
  Subject   Subject?  @relation(fields: [subjectId], references: [id])
  subjectId Int
  School    School?   @relation(fields: [schoolId], references: [id])
  schoolId  Int
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt

  @@id([subjectId, schoolId])
}

model GradesOnDocs {
  doc       Doc       @relation(fields: [docId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  docId     Int
  grade     Grade     @relation(fields: [gradeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gradeId   Int
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt

  @@id([gradeId, docId])
}
